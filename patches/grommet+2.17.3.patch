diff --git a/node_modules/grommet/components/Box/index.d.ts b/node_modules/grommet/components/Box/index.d.ts
index 80fdf56..fa0b2ee 100644
--- a/node_modules/grommet/components/Box/index.d.ts
+++ b/node_modules/grommet/components/Box/index.d.ts
@@ -1,4 +1,4 @@
-import * as React from 'react';
+import * as React from "react";
 import {
   A11yTitleType,
   AlignContentType,
@@ -17,72 +17,62 @@ import {
   PolymorphicType,
   RoundType,
   WidthType,
-} from '../../utils';
+} from "../../utils";
 
 export interface BoxProps {
   a11yTitle?: A11yTitleType;
   alignSelf?: AlignSelfType;
   gridArea?: GridAreaType;
   margin?: MarginType;
-  align?: 'start' | 'center' | 'end' | 'baseline' | 'stretch';
+  align?: "start" | "center" | "end" | "baseline" | "stretch";
   alignContent?: AlignContentType;
   animation?:
-    | 'fadeIn'
-    | 'fadeOut'
-    | 'jiggle'
-    | 'pulse'
-    | 'rotateLeft'
-    | 'rotateRight'
-    | 'slideUp'
-    | 'slideDown'
-    | 'slideLeft'
-    | 'slideRight'
-    | 'zoomIn'
-    | 'zoomOut'
+    | "fadeIn"
+    | "fadeOut"
+    | "jiggle"
+    | "pulse"
+    | "rotateLeft"
+    | "rotateRight"
+    | "slideUp"
+    | "slideDown"
+    | "slideLeft"
+    | "slideRight"
+    | "zoomIn"
+    | "zoomOut"
     | {
         type?:
-          | 'fadeIn'
-          | 'fadeOut'
-          | 'jiggle'
-          | 'pulse'
-          | 'rotateLeft'
-          | 'rotateRight'
-          | 'slideUp'
-          | 'slideDown'
-          | 'slideLeft'
-          | 'slideRight'
-          | 'zoomIn'
-          | 'zoomOut';
+          | "fadeIn"
+          | "fadeOut"
+          | "jiggle"
+          | "pulse"
+          | "rotateLeft"
+          | "rotateRight"
+          | "slideUp"
+          | "slideDown"
+          | "slideLeft"
+          | "slideRight"
+          | "zoomIn"
+          | "zoomOut";
         delay?: number;
         duration?: number;
-        size?: 'xsmall' | 'small' | 'medium' | 'large' | 'xlarge';
+        size?: "xsmall" | "small" | "medium" | "large" | "xlarge";
       }
     | (
-        | 'fadeIn'
-        | 'fadeOut'
-        | 'jiggle'
-        | 'pulse'
-        | 'slideUp'
-        | 'slideDown'
-        | 'slideLeft'
-        | 'slideRight'
-        | 'zoomIn'
-        | 'zoomOut'
+        | "fadeIn"
+        | "fadeOut"
+        | "jiggle"
+        | "pulse"
+        | "slideUp"
+        | "slideDown"
+        | "slideLeft"
+        | "slideRight"
+        | "zoomIn"
+        | "zoomOut"
         | {
-            type?:
-              | 'fadeIn'
-              | 'fadeOut'
-              | 'jiggle'
-              | 'pulse'
-              | 'slideUp'
-              | 'slideDown'
-              | 'slideLeft'
-              | 'slideRight'
-              | 'zoomIn'
-              | 'zoomOut';
+            type?: "fadeIn" | "fadeOut" | "jiggle" | "pulse" | "slideUp" | "slideDown" | "slideLeft" | "slideRight" | "zoomIn" | "zoomOut";
             delay?: number;
             duration?: number;
-            size?: 'xsmall' | 'small' | 'medium' | 'large' | 'xlarge';
+            size?: "xsmall" | "small" | "medium" | "large" | "xlarge";
           }
       )[];
   background?: BackgroundType;
@@ -90,49 +80,36 @@ export interface BoxProps {
   border?: BorderType;
   direction?: DirectionType;
   elevation?: ElevationType;
-  flex?: 'grow' | 'shrink' | boolean | { grow?: number; shrink?: number };
+  flex?: "grow" | "shrink" | boolean | { grow?: number; shrink?: number };
   fill?: FillType;
   focusIndicator?: boolean;
   gap?: GapType;
   height?: HeightType;
-  hoverIndicator?:
-    | { background?: BackgroundType; elevation?: ElevationType }
-    | BackgroundType
-    | boolean;
-  justify?:
-    | 'around'
-    | 'between'
-    | 'center'
-    | 'end'
-    | 'evenly'
-    | 'start'
-    | 'stretch';
+  hoverIndicator?: { background?: BackgroundType; elevation?: ElevationType } | BackgroundType | boolean;
+  justify?: "around" | "between" | "center" | "end" | "evenly" | "start" | "stretch";
   onClick?: (...args: any[]) => any;
   overflow?:
-    | 'auto'
-    | 'hidden'
-    | 'scroll'
-    | 'visible'
+    | "auto"
+    | "hidden"
+    | "scroll"
+    | "visible"
     | {
-        horizontal?: 'auto' | 'hidden' | 'scroll' | 'visible';
-        vertical?: 'auto' | 'hidden' | 'scroll' | 'visible';
-      }
-    | string;
+        horizontal?: "auto" | "hidden" | "scroll" | "visible";
+        vertical?: "auto" | "hidden" | "scroll" | "visible";
+      };
   pad?: PadType;
   responsive?: boolean;
   round?: RoundType;
   tag?: PolymorphicType;
   as?: PolymorphicType;
   width?: WidthType;
-  wrap?: boolean | 'reverse';
+  wrap?: boolean | "reverse";
 }
 
-export interface BoxExtendedProps
-  extends BoxProps,
-    Omit<JSX.IntrinsicElements['div'], keyof BoxProps> {}
+export interface BoxExtendedProps extends BoxProps, Omit<JSX.IntrinsicElements["div"], keyof BoxProps> {}
 
 // Keep type alias for backwards compatibility.
-export type BoxTypes = BoxProps & JSX.IntrinsicElements['div'];
+export type BoxTypes = BoxProps & JSX.IntrinsicElements["div"];
 
 declare const Box: React.FC<BoxExtendedProps>;
 
diff --git a/node_modules/grommet/components/Heading/index.d.ts b/node_modules/grommet/components/Heading/index.d.ts
index d870a04..b48bb91 100644
--- a/node_modules/grommet/components/Heading/index.d.ts
+++ b/node_modules/grommet/components/Heading/index.d.ts
@@ -1,3 +1,4 @@
+import { LiteralUnion } from 'prettier';
 import * as React from 'react';
 import {
   A11yTitleType,
@@ -7,7 +8,7 @@ import {
   MarginType,
   Omit,
   PolymorphicType,
-  TextAlignType,
+  TextAlignType
 } from '../../utils';
 
 export interface HeadingProps {
@@ -20,7 +21,7 @@ export interface HeadingProps {
   level?: '1' | '2' | '3' | '4' | '5' | '6' | 1 | 2 | 3 | 4 | 5 | 6;
   margin?: MarginType;
   responsive?: boolean;
-  size?: 'small' | 'medium' | 'large' | 'xlarge' | string;
+  size?: LiteralUnion< 'small' | 'medium' | 'large' | 'xlarge', string>;
   textAlign?: TextAlignType;
   truncate?: boolean;
 }
diff --git a/node_modules/grommet/components/Text/index.d.ts b/node_modules/grommet/components/Text/index.d.ts
index 12c1f2b..38c8dc3 100644
--- a/node_modules/grommet/components/Text/index.d.ts
+++ b/node_modules/grommet/components/Text/index.d.ts
@@ -1,14 +1,5 @@
-import * as React from 'react';
-import {
-  A11yTitleType,
-  AlignSelfType,
-  ColorType,
-  GridAreaType,
-  MarginType,
-  Omit,
-  PolymorphicType,
-  TextAlignType,
-} from '../../utils';
+import * as React from "react";
+import { A11yTitleType, AlignSelfType, ColorType, GridAreaType, MarginType, Omit, PolymorphicType, TextAlignType } from "../../utils";
 
 export interface TextProps {
   a11yTitle?: A11yTitleType;
@@ -17,28 +8,14 @@ export interface TextProps {
   color?: ColorType;
   gridArea?: GridAreaType;
   margin?: MarginType;
-  size?:
-    | 'xsmall'
-    | 'small'
-    | 'medium'
-    | 'large'
-    | 'xlarge'
-    | 'xxlarge'
-    | '2xl'
-    | '3xl'
-    | '4xl'
-    | '5xl'
-    | '6xl'
-    | string;
+  size?: "xsmall" | "small" | "medium" | "large" | "xlarge" | "xxlarge" | "2xl" | "3xl" | "4xl" | "5xl" | "6xl";
   tag?: PolymorphicType;
   textAlign?: TextAlignType;
   truncate?: boolean;
-  weight?: 'normal' | 'bold' | number;
-  wordBreak?: 'normal' | 'break-all' | 'keep-all' | 'break-word';
+  weight?: "normal" | "bold" | number;
+  wordBreak?: "normal" | "break-all" | "keep-all" | "break-word";
 }
-export interface TextExtendedProps
-  extends TextProps,
-    Omit<JSX.IntrinsicElements['span'], 'color'> {}
+export interface TextExtendedProps extends TextProps, Omit<JSX.IntrinsicElements["span"], "color"> {}
 
 declare const Text: React.FC<TextExtendedProps>;
 
diff --git a/node_modules/grommet/themes/index.d.ts b/node_modules/grommet/themes/index.d.ts
index 5ed6aa6..35ada76 100644
--- a/node_modules/grommet/themes/index.d.ts
+++ b/node_modules/grommet/themes/index.d.ts
@@ -1,3 +1,4 @@
-export { ThemeType, base, generate } from './base';
-export { grommet } from './grommet';
-export { dark } from './dark';
+export { base, generate, ThemeType } from "./base";
+export { dark } from "./dark";
+export { grommet } from "./grommet";
+export type ThemeMode = "dark" | "light" | undefined;
diff --git a/node_modules/grommet/utils/index.d.ts b/node_modules/grommet/utils/index.d.ts
index 10792c4..9d229de 100644
--- a/node_modules/grommet/utils/index.d.ts
+++ b/node_modules/grommet/utils/index.d.ts
@@ -1,11 +1,10 @@
+import { LiteralUnion } from "prettier";
+
 // colors.js
-declare const normalizeColor: (
-  color: string | { dark?: string; light?: string },
-  theme: object,
-  required?: boolean,
-) => string;
+declare const normalizeColor: (color: string | { dark?: string; light?: string }, theme: object, required?: boolean) => string;
 
 export { normalizeColor };
+export { isObject, deepFreeze, deepMerge, removeUndefined };
 
 // object.js
 export type DeepReadonly<T extends object> = {
@@ -21,23 +20,16 @@ export type DeepFreeze = <T extends object>(obj: T) => DeepReadonly<T>;
 // overload because generic variadic solution has messy result and all/most mergings are binary
 export interface DeepMerge {
   <T extends object, S extends object>(target: T, source: S): T & S;
-  <T extends object, S extends object[]>(target: T, ...sources: S): T &
-    S[number];
+  <T extends object, S extends object[]>(target: T, ...sources: S): T & S[number];
 }
 
 export type Omit<T, K> = Pick<T, Exclude<keyof T, K>>;
-export type PolymorphicType =
-  | keyof JSX.IntrinsicElements
-  | React.ComponentType<any>;
+export type PolymorphicType = keyof JSX.IntrinsicElements | React.ComponentType<any>;
 
 declare const isObject: (item: any) => boolean;
 declare const deepFreeze: DeepFreeze;
 declare const deepMerge: DeepMerge;
-declare const removeUndefined: <T extends object>(
-  obj: T,
-) => NonUndefinedProps<T>;
-
-export { isObject, deepFreeze, deepMerge, removeUndefined };
+declare const removeUndefined: <T extends object>(obj: T) => NonUndefinedProps<T>;
 
 /*
  * Utility type for inferring the props type of a component.
@@ -50,75 +42,33 @@ export { isObject, deepFreeze, deepMerge, removeUndefined };
  * type SomeComponentProps = PropsOf<typeof SomeComponent>;
  * ```
  */
-export type PropsOf<TComponent> = TComponent extends React.ComponentType<
-  infer P
->
-  ? P
-  : never;
+export type PropsOf<TComponent> = TComponent extends React.ComponentType<infer P> ? P : never;
 
 // the basic T-Shirt sizes xsmall through xlarge. Some places add on.
-type TShirtSizeType =
-  | 'xsmall'
-  | 'small'
-  | 'medium'
-  | 'large'
-  | 'xlarge'
-  | string;
+type TShirtSizeType = "xsmall" | "small" | "medium" | "large" | "xlarge";
 
 // Extracting types for common properties among components
-type BoxSideType =
-  | 'top'
-  | 'left'
-  | 'bottom'
-  | 'right'
-  | 'start'
-  | 'end'
-  | 'horizontal'
-  | 'vertical'
-  | 'all'
-  | 'between';
-type BoxSizeType = 'xsmall' | 'small' | 'medium' | 'large' | 'xlarge' | string;
-type BoxStyleType =
-  | 'solid'
-  | 'dashed'
-  | 'dotted'
-  | 'double'
-  | 'groove'
-  | 'ridge'
-  | 'inset'
-  | 'outset'
-  | 'hidden';
-export type EdgeSizeType =
-  | 'xxsmall'
-  | 'xsmall'
-  | 'small'
-  | 'medium'
-  | 'large'
-  | 'xlarge';
+type BoxSideType = "top" | "left" | "bottom" | "right" | "start" | "end" | "horizontal" | "vertical" | "all" | "between";
+type BoxSizeType = "xsmall" | "small" | "medium" | "large" | "xlarge" | string;
+type BoxStyleType = "solid" | "dashed" | "dotted" | "double" | "groove" | "ridge" | "inset" | "outset" | "hidden";
+export type EdgeSizeType = LiteralUnion<"xxsmall" | "xsmall" | "small" | "medium" | "large" | "xlarge", string>;
 type EdgeType =
-  | 'none'
+  | "none"
   | EdgeSizeType
   | {
-      bottom?: EdgeSizeType | string;
-      end?: EdgeSizeType | string;
-      horizontal?: EdgeSizeType | string;
-      left?: EdgeSizeType | string;
-      right?: EdgeSizeType | string;
-      start?: EdgeSizeType | string;
-      top?: EdgeSizeType | string;
-      vertical?: EdgeSizeType | string;
-    }
-  | string;
+      bottom?: EdgeSizeType;
+      end?: EdgeSizeType;
+      horizontal?: EdgeSizeType;
+      left?: EdgeSizeType;
+      right?: EdgeSizeType;
+      start?: EdgeSizeType;
+      top?: EdgeSizeType;
+      vertical?: EdgeSizeType;
+    };
 
 export type A11yTitleType = string;
-export type AlignContentType =
-  | 'start'
-  | 'center'
-  | 'end'
-  | 'between'
-  | 'around'
-  | 'stretch';
-export type AlignSelfType = 'start' | 'center' | 'end' | 'stretch';
+export type AlignContentType = "start" | "center" | "end" | "between" | "around" | "stretch";
+export type AlignSelfType = "start" | "center" | "end" | "stretch";
 export type AnimateType = boolean;
 export type BackgroundType =
   | string
@@ -127,28 +77,15 @@ export type BackgroundType =
       dark?: boolean | string;
       image?: string;
       position?: string;
-      opacity?: 'weak' | 'medium' | 'strong' | number | boolean;
-      repeat?: 'no-repeat' | 'repeat' | string;
-      size?: 'cover' | 'contain' | string;
+      opacity?: "weak" | "medium" | "strong" | number | boolean;
+      repeat?: "no-repeat" | "repeat" | string;
+      size?: "cover" | "contain" | string;
       light?: string;
     };
-export type BasisType =
-  | 'xxsmall'
-  | 'xsmall'
-  | 'small'
-  | 'medium'
-  | 'large'
-  | 'xlarge'
-  | 'xxlarge'
-  | 'full'
-  | '1/2'
-  | '1/3'
-  | '2/3'
-  | '1/4'
-  | '2/4'
-  | '3/4'
-  | 'auto'
-  | string;
+export type BasisType = LiteralUnion<
+  "xxsmall" | "xsmall" | "small" | "medium" | "large" | "xlarge" | "xxlarge" | "full" | "1/2" | "1/3" | "2/3" | "1/4" | "2/4" | "3/4" | "auto",
+  string
+>;
 export type BorderType =
   | boolean
   | BoxSideType
@@ -169,75 +106,33 @@ export type BorderType =
       style?: BoxStyleType;
     }[];
 export type ColorType = string | { dark?: string; light?: string } | undefined;
-export type DirectionType =
-  | 'row'
-  | 'column'
-  | 'row-responsive'
-  | 'row-reverse'
-  | 'column-reverse';
-export type ElevationType =
-  | 'none'
-  | 'xsmall'
-  | 'small'
-  | 'medium'
-  | 'large'
-  | 'xlarge'
-  | string;
-export type FillType = 'horizontal' | 'vertical' | boolean;
-export type GapType = 'none' | EdgeSizeType | string;
+export type DirectionType = "row" | "column" | "row-responsive" | "row-reverse" | "column-reverse";
+export type ElevationType = "none" | "xsmall" | "small" | "medium" | "large" | "xlarge";
+export type FillType = "horizontal" | "vertical" | boolean;
+export type GapType = "none" | EdgeSizeType | string;
 export type GraphColorsType = string[] | { dark?: string[]; light?: string[] };
 export type GridAreaType = string;
-export type JustifyContentType =
-  | 'start'
-  | 'center'
-  | 'end'
-  | 'between'
-  | 'around'
-  | 'stretch';
+export type JustifyContentType = "start" | "center" | "end" | "between" | "around" | "stretch";
 export type KeyboardType = (event: React.KeyboardEvent<HTMLElement>) => void;
 export type MarginType = EdgeType;
-export type OpacityType =
-  | 'weak'
-  | 'medium'
-  | 'strong'
-  | string
-  | true
-  | false
-  | number;
+export type OpacityType = "weak" | "medium" | "strong" | string | true | false | number;
 export type PadType = EdgeType;
 export type PlaceHolderType = string | JSX.Element | React.ReactNode;
 export type RoundType =
   | boolean
-  | 'xsmall'
-  | 'small'
-  | 'medium'
-  | 'large'
-  | 'xlarge'
-  | 'full'
+  | "xsmall"
+  | "small"
+  | "medium"
+  | "large"
+  | "xlarge"
+  | "full"
   | string
   | {
-      corner?:
-        | 'top'
-        | 'left'
-        | 'bottom'
-        | 'right'
-        | 'top-left'
-        | 'top-right'
-        | 'bottom-left'
-        | 'bottom-right';
-      size?: 'xsmall' | 'small' | 'medium' | 'large' | 'xlarge' | string;
+      corner?: "top" | "left" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right";
+      size?: "xsmall" | "small" | "medium" | "large" | "xlarge" | string;
     };
-export type TextAlignType = 'start' | 'center' | 'end';
-export type ThicknessType =
-  | 'hair'
-  | 'xsmall'
-  | 'small'
-  | 'medium'
-  | 'large'
-  | 'xlarge'
-  | 'none'
-  | string
-  | number;
+export type TextAlignType = "start" | "center" | "end";
+export type ThicknessType = "hair" | "xsmall" | "small" | "medium" | "large" | "xlarge" | "none" | string | number;
 
 declare const breakpointEdgeSize: {
   none?: string;
@@ -272,23 +167,23 @@ declare const breakpointSize: {
 export type BreakpointSize = typeof breakpointSize;
 
 export type HeightType =
-  | 'xxsmall'
-  | 'xxlarge'
+  | "xxsmall"
+  | "xxlarge"
   | TShirtSizeType
-  | '100%'
+  | "100%"
   | {
-      height?: 'xxsmall' | 'xxlarge' | TShirtSizeType | '100%';
-      max?: 'xxsmall' | 'xxlarge' | TShirtSizeType | '100%';
-      min?: 'xxsmall' | 'xxlarge' | TShirtSizeType | '100%';
+      height?: "xxsmall" | "xxlarge" | TShirtSizeType | "100%";
+      max?: "xxsmall" | "xxlarge" | TShirtSizeType | "100%";
+      min?: "xxsmall" | "xxlarge" | TShirtSizeType | "100%";
     };
 
 export type WidthType =
-  | 'xxsmall'
-  | 'xxlarge'
+  | "xxsmall"
+  | "xxlarge"
   | TShirtSizeType
-  | '100%'
+  | "100%"
   | {
-      width?: 'xxsmall' | 'xxlarge' | TShirtSizeType | '100%';
-      max?: 'xxsmall' | 'xxlarge' | TShirtSizeType | '100%';
-      min?: 'xxsmall' | 'xxlarge' | TShirtSizeType | '100%';
+      width?: "xxsmall" | "xxlarge" | TShirtSizeType | "100%";
+      max?: "xxsmall" | "xxlarge" | TShirtSizeType | "100%";
+      min?: "xxsmall" | "xxlarge" | TShirtSizeType | "100%";
     };
